{"version":3,"sources":["use-forwarded-modal-view-model.tsx"],"names":["useForwardedModalViewModel","ref","handleHide","desiredVisibility","setDesiredVisibility","result$","Subject","visibility$","BehaviorSubject","param","setParam","hidingFinishedEvent$","hideCommand$","subscription","pipe","next","EMPTY","subscribe","unsubscribe","hide","Event","show","_param","confirm","data","value","type","ModalResultType","CONFIRM","cancel","CANCEL","setHidingFinished"],"mappings":";;;;;;;AAAA;;AAQA;;AACA;;AAIA;;AACA;;AAIO,MAAMA,0BAA0B,GAAG,CAIxCC,GAJwC,EAQxC;AACEC,EAAAA;AADF,CARwC,KAarC;AACH;AACA,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4C,qBAAS,KAAT,CAAlD,CAFG,CAIH;;AACA,QAAM,CAACC,OAAD,IAAY,qBAAS,MAAM,IAAIC,aAAJ,EAAf,CAAlB,CALG,CAMH;;AACA,QAAM,CAACC,WAAD,IAAgB,qBACpB,MAAM,IAAIC,qBAAJ,CAAqC,QAArC,CADc,CAAtB;AAGA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB,qBAAuB,IAAvB,CAA1B;AACA,QAAM,CAACC,oBAAD,IAAyB,qBAAS,MAAM,IAAIL,aAAJ,EAAf,CAA/B;AACA,QAAM,CAACM,YAAD,IAAiB,qBAAS,MAAM,IAAIN,aAAJ,EAAf,CAAvB;AAEA,wBAAU,MAAM;AACd,UAAMO,YAAY,GAAGD,YAAY,CAC9BE,IADkB,CAEjB,0BAAU,MAAM;AACdV,MAAAA,oBAAoB,CAAC,KAAD,CAApB;;AACA,UAAIF,UAAJ,EAAgB;AACd,eAAOS,oBAAoB,CAACG,IAArB,CACL,uBADK,EAEL,oBAAI,MAAM;AACRP,UAAAA,WAAW,CAACQ,IAAZ,CAAiB,QAAjB;AACD,SAFD,CAFK,CAAP;AAMD,OAPD,MAOO;AACLR,QAAAA,WAAW,CAACQ,IAAZ,CAAiB,QAAjB;AACA,eAAOC,WAAP;AACD;AACF,KAbD,CAFiB,EAiBlBC,SAjBkB,EAArB;AAmBA,WAAO,MAAM;AACXJ,MAAAA,YAAY,CAACK,WAAb;AACD,KAFD;AAGD,GAvBD,EAuBG,CAAChB,UAAD,EAAaU,YAAb,EAA2BD,oBAA3B,EAAiDJ,WAAjD,CAvBH;AAyBA,QAAMY,IAAI,GAAG,wBAAY,MAAM;AAC7BP,IAAAA,YAAY,CAACG,IAAb,CAAkB,IAAIK,YAAJ,EAAlB;AACD,GAFY,EAEV,CAACR,YAAD,CAFU,CAAb;AAIA,QAAMS,IAAI,GAAG,wBAAY,MAAM;AAC7BjB,IAAAA,oBAAoB,CAAC,IAAD,CAApB;AACAG,IAAAA,WAAW,CAACQ,IAAZ,CAAiB,OAAjB;AACD,GAHY,EAGV,CAACR,WAAD,CAHU,CAAb;AAKA,kCACEN,GADF,EAEE,OAAO;AACL;AACAoB,IAAAA,IAAI,EAAGC,MAAD,IAAmB;AACvBZ,MAAAA,QAAQ,CAACY,MAAD,CAAR;AACAD,MAAAA,IAAI,GAFmB,CAGvB;;AACA,aAAO,0BAAehB,OAAf,CAAP;AACD;AAPI,GAAP,CAFF,EAWE,CAACA,OAAD,EAAUgB,IAAV,CAXF,EAhDG,CA8DH;;AACA,QAAME,OAAO,GAAG,yBACd;AACCC,EAAAA,IAAD,IAAU;AACRL,IAAAA,IAAI,GADI,CAER;;AACAZ,IAAAA,WAAW,CACRO,IADH,CAEI,uBAAQW,KAAD,IAAWA,KAAK,KAAK,QAA5B,CAFJ,EAGI,uBAHJ,EAKGR,SALH,CAKa,MAAM;AACfZ,MAAAA,OAAO,CAACU,IAAR,CAAa;AACXW,QAAAA,IAAI,EAAEC,iCAAgBC,OADX;AAEX;AACAJ,QAAAA;AAHW,OAAb;AAKD,KAXH;AAYD,GAjBa,EAkBd,CAACL,IAAD,EAAOd,OAAP,EAAgBE,WAAhB,CAlBc,CAAhB,CA/DG,CAoFH;;AACA,QAAMsB,MAAM,GAAG,wBAAY,MAAM;AAC/BV,IAAAA,IAAI,GAD2B,CAE/B;;AACAZ,IAAAA,WAAW,CACRO,IADH,CAEI,uBAAQW,KAAD,IAAWA,KAAK,KAAK,QAA5B,CAFJ,EAGI,uBAHJ,EAKGR,SALH,CAKa,MAAM;AACfZ,MAAAA,OAAO,CAACU,IAAR,CAAa;AACXW,QAAAA,IAAI,EAAEC,iCAAgBG;AADX,OAAb;AAGD,KATH;AAUD,GAbc,EAaZ,CAACX,IAAD,EAAOd,OAAP,EAAgBE,WAAhB,CAbY,CAAf;AAeA,QAAMwB,iBAAiB,GAAG,wBAAY,MAAM;AAC1CpB,IAAAA,oBAAoB,CAACI,IAArB,CAA0B,IAAIK,YAAJ,EAA1B;AACD,GAFyB,EAEvB,CAACT,oBAAD,CAFuB,CAA1B;AAIA,SAAO,oBACL,OAAO;AACLY,IAAAA,OADK;AAELM,IAAAA,MAFK;AAGLpB,IAAAA,KAHK;AAILsB,IAAAA,iBAJK;AAKL5B,IAAAA;AALK,GAAP,CADK,EAQL,CAACoB,OAAD,EAAUM,MAAV,EAAkBpB,KAAlB,EAAyBsB,iBAAzB,EAA4C5B,iBAA5C,CARK,CAAP;AAUD,CA/HM","sourcesContent":["import {\n  MutableRefObject,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useState,\n} from 'react';\nimport { BehaviorSubject, EMPTY, firstValueFrom, Subject } from 'rxjs';\nimport { filter, first, switchMap, tap } from 'rxjs/operators';\nimport type { ModalInstance } from './modal-instance';\nimport type { ModalResult } from './modal-result';\nimport type { ModalConfirmFunction } from './modal-confirm-function';\nimport { ModalResultType } from './modal-result-type';\nimport { Event } from './event';\n\ntype ModalVisibility = 'HIDDEN' | 'SHOWN';\n\nexport const useForwardedModalViewModel = <\n  Data extends unknown = void, // 모달 결과로 받을 값의 타입\n  Param extends unknown = void\n>(\n  ref:\n    | ((instance: ModalInstance<Data, Param> | null) => void)\n    | MutableRefObject<ModalInstance<Data, Param> | null>\n    | null,\n  {\n    handleHide,\n  }: {\n    handleHide: boolean;\n  }\n) => {\n  // desired 표시 상태 (이 값이 true 라고 해서 모달이 표시된 상태는 아닙니다. false 도 마찬가지)\n  const [desiredVisibility, setDesiredVisibility] = useState(false);\n\n  // AlertResult Subject\n  const [result$] = useState(() => new Subject<ModalResult<Data>>());\n  // 보여짐/숨겨짐 상태\n  const [visibility$] = useState(\n    () => new BehaviorSubject<ModalVisibility>('HIDDEN')\n  );\n  const [param, setParam] = useState<Param | null>(null);\n  const [hidingFinishedEvent$] = useState(() => new Subject<Event>());\n  const [hideCommand$] = useState(() => new Subject<Event>());\n\n  useEffect(() => {\n    const subscription = hideCommand$\n      .pipe(\n        switchMap(() => {\n          setDesiredVisibility(false);\n          if (handleHide) {\n            return hidingFinishedEvent$.pipe(\n              first(),\n              tap(() => {\n                visibility$.next('HIDDEN');\n              })\n            );\n          } else {\n            visibility$.next('HIDDEN');\n            return EMPTY;\n          }\n        })\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [handleHide, hideCommand$, hidingFinishedEvent$, visibility$]);\n\n  const hide = useCallback(() => {\n    hideCommand$.next(new Event());\n  }, [hideCommand$]);\n\n  const show = useCallback(() => {\n    setDesiredVisibility(true);\n    visibility$.next('SHOWN');\n  }, [visibility$]);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      // @ts-ignore\n      show: (_param: Param) => {\n        setParam(_param);\n        show();\n        // 모달 결과 Subject 에서\n        return firstValueFrom(result$);\n      },\n    }),\n    [result$, show]\n  );\n\n  // 모달 종료 (승인)\n  const confirm = useCallback<ModalConfirmFunction<Data>>(\n    // @ts-ignore\n    (data) => {\n      hide();\n      // 숨김 상태로 변경되면 result 발행\n      visibility$\n        .pipe(\n          filter((value) => value === 'HIDDEN'),\n          first()\n        )\n        .subscribe(() => {\n          result$.next({\n            type: ModalResultType.CONFIRM,\n            // @ts-ignore\n            data,\n          });\n        });\n    },\n    [hide, result$, visibility$]\n  );\n\n  // 모달 종료 (취소)\n  const cancel = useCallback(() => {\n    hide();\n    // 숨김 상태로 변경되면 result 발행\n    visibility$\n      .pipe(\n        filter((value) => value === 'HIDDEN'),\n        first()\n      )\n      .subscribe(() => {\n        result$.next({\n          type: ModalResultType.CANCEL,\n        });\n      });\n  }, [hide, result$, visibility$]);\n\n  const setHidingFinished = useCallback(() => {\n    hidingFinishedEvent$.next(new Event());\n  }, [hidingFinishedEvent$]);\n\n  return useMemo(\n    () => ({\n      confirm,\n      cancel,\n      param,\n      setHidingFinished,\n      desiredVisibility,\n    }),\n    [confirm, cancel, param, setHidingFinished, desiredVisibility]\n  );\n};\n"]}