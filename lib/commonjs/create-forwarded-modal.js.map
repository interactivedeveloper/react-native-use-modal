{"version":3,"sources":["create-forwarded-modal.tsx"],"names":["createForwardedModal","Content","handleHide","React","forwardRef","_","ref","confirm","cancel","desiredVisibility","param","setHidingFinished","handleOnHide"],"mappings":";;;;;;;AAAA;;AAGA;;;;;;AAuBA;AACA;AACA;AACO,MAAMA,oBAAoB,GAAG,CAIlC,GAAG,CAACC,OAAD,EAAU;AAAEC,EAAAA,UAAU,GAAG;AAAf,IAAyB,EAAnC,CAJ+B,KASlC,CAAC,MAAM;AACL,sBAAOC,eAAMC,UAAN,CAA6C,CAACC,CAAD,EAAIC,GAAJ,KAAY;AAC9D,UAAM;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,MAAX;AAAmBC,MAAAA,iBAAnB;AAAsCC,MAAAA,KAAtC;AAA6CC,MAAAA;AAA7C,QACJ,4DAAwCL,GAAxC,EAA6C;AAAEJ,MAAAA;AAAF,KAA7C,CADF;AAGA,UAAMU,YAAY,GAAG,wBAAY,MAAM;AACrCD,MAAAA,iBAAiB;AAClB,KAFoB,EAElB,CAACA,iBAAD,CAFkB,CAArB;AAIA,wBACE,6BAAC,OAAD;AACE,MAAA,OAAO,EAAEJ,OADX;AAEE,MAAA,MAAM,EAAEC,MAFV;AAGE,MAAA,KAAK,EAAEE,KAHT;AAIE,MAAA,SAAS,EAAED,iBAJb;AAKE,MAAA,MAAM,EAAEG;AALV,MADF;AASD,GAjBM,CAAP;AAkBD,CAnBD,GATK","sourcesContent":["import React, { useCallback } from 'react';\nimport type { ModalConfirmFunction } from './modal-confirm-function';\nimport type { ModalInstance } from './modal-instance';\nimport { useForwardedModalViewModel } from './use-forwarded-modal-view-model';\n\n// 모달 내용 컴포넌트\ntype ContentComponent<\n  Data extends unknown = void, // 모달 결과로 받을 값의 타입\n  Param extends unknown = void\n> = React.VoidFunctionComponent<{\n  confirm: ModalConfirmFunction<Data>; // 모달 종료 함수 (승인)\n  cancel: () => void; // 모달 종료 함수 (취소)\n  param: Param | null;\n  onHide: () => void;\n  isVisible: boolean;\n}>;\n\ntype Option = {\n  handleHide?: boolean;\n};\n\nexport type CreateForwardedModalFunctionParam<\n  Data extends unknown = void,\n  Param extends unknown = void\n> = [Content: ContentComponent<Data, Param>, option?: Option];\n\n/**\n * 모달 컴포넌트 생성 함수\n */\nexport const createForwardedModal = <\n  Data extends unknown = void, // 모달 결과로 받을 값의 타입\n  Param extends unknown = void\n>(\n  ...[Content, { handleHide = false } = {}]: CreateForwardedModalFunctionParam<\n    Data,\n    Param\n  >\n) =>\n  (() => {\n    return React.forwardRef<ModalInstance<Data, Param>>((_, ref) => {\n      const { confirm, cancel, desiredVisibility, param, setHidingFinished } =\n        useForwardedModalViewModel<Data, Param>(ref, { handleHide });\n\n      const handleOnHide = useCallback(() => {\n        setHidingFinished();\n      }, [setHidingFinished]);\n\n      return (\n        <Content\n          confirm={confirm}\n          cancel={cancel}\n          param={param}\n          isVisible={desiredVisibility}\n          onHide={handleOnHide}\n        />\n      );\n    });\n  })();\n"]}