{"version":3,"sources":["use-modal.tsx"],"names":["useModal","modal","context","ModalContext","modalId","String","ModalIdGenerator","getInstance","generate","instance$","BehaviorSubject","clone","React","cloneElement","ref","instance","next","set","delete","show","param","pipe","isNotNil"],"mappings":";;;;;;;AAAA;;AAQA;;AACA;;AACA;;AAGA;;AACA;;;;;;AAIA;AACA;AACA;AACO,MAAMA,QAAQ,GAGnBC,KAHsB,IAInB;AACH,QAAMC,OAAO,GAAG,uBAAWC,0BAAX,CAAhB,CADG,CAEH;;AACA,QAAMC,OAAO,GAAG,oBACd,MAAMC,MAAM,CAACC,mCAAiBC,WAAjB,GAA+BC,QAA/B,EAAD,CADE,EAEd,EAFc,CAAhB;AAKA,QAAM,CAACC,SAAD,IAAc,qBAClB,MAAM,IAAIC,qBAAJ,CAAoD,IAApD,CADY,CAApB;AAIA,wBAAU,MAAM;AACd,UAAMC,KAAK,gBAAGC,eAAMC,YAAN,CAA6BZ,KAA7B,EAAoC;AAChDa,MAAAA,GAAG,EAAGC,QAAD,IAAc;AACjBN,QAAAA,SAAS,CAACO,IAAV,CAAeD,QAAf;AACD;AAH+C,KAApC,CAAd;;AAKAb,IAAAA,OAAO,CAACe,GAAR,CAAYb,OAAZ,EAAqBO,KAArB;AAEA,WAAO,MAAM;AACXT,MAAAA,OAAO,CAACgB,MAAR,CAAed,OAAf;AACD,KAFD;AAGD,GAXD,EAWG,CAACF,OAAD,EAAUO,SAAV,EAAqBR,KAArB,EAA4BG,OAA5B,CAXH;AAaA,QAAMe,IAAI,GAAG,wBACX,MAAOC,KAAP,IACE,CAAC,MAAM,0BAAeX,SAAS,CAACY,IAAV,CAAe,uBAAOC,kBAAP,CAAf,CAAf,CAAP,EAAyDH,IAAzD,CAA8DC,KAA9D,CAFS,EAGX,CAACX,SAAD,CAHW,CAAb;AAMA,SAAO,oBAAiC,MAAM;AAC5C,WAAO;AACLU,MAAAA;AADK,KAAP;AAGD,GAJM,EAIJ,CAACA,IAAD,CAJI,CAAP;AAKD,CAxCM","sourcesContent":["import React, {\n  RefAttributes,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { BehaviorSubject, firstValueFrom } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { ModalContext } from './modal-context';\nimport type { ModalInstance } from './modal-instance';\nimport type { ForwardedRef } from './util/forwarde-ref';\nimport { isNotNil } from './util/is-not-nil';\nimport { ModalIdGenerator } from './modal-id-generator';\n\ntype ModalRef = RefAttributes<ModalInstance<any, any>>;\n\n/**\n * 모달을 등록하는 hook\n */\nexport const useModal = <\n  Component extends React.ForwardRefExoticComponent<ModalRef>\n>(\n  modal: React.ReactElement\n) => {\n  const context = useContext(ModalContext);\n  // 모달 ID\n  const modalId = useMemo(\n    () => String(ModalIdGenerator.getInstance().generate()),\n    []\n  );\n\n  const [instance$] = useState(\n    () => new BehaviorSubject<ModalInstance<any, any> | null>(null)\n  );\n\n  useEffect(() => {\n    const clone = React.cloneElement<ModalRef>(modal, {\n      ref: (instance) => {\n        instance$.next(instance);\n      },\n    });\n    context.set(modalId, clone);\n\n    return () => {\n      context.delete(modalId);\n    };\n  }, [context, instance$, modal, modalId]);\n\n  const show = useCallback<ForwardedRef<Component>['show']>(\n    async (param) =>\n      (await firstValueFrom(instance$.pipe(filter(isNotNil)))).show(param),\n    [instance$]\n  );\n\n  return useMemo<ForwardedRef<Component>>(() => {\n    return {\n      show,\n    } as ForwardedRef<Component>;\n  }, [show]);\n};\n"]}