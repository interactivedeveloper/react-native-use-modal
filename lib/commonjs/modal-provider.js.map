{"version":3,"sources":["modal-provider.tsx"],"names":["ModalProvider","children","modalMap","setModalMap","Map","modalContext","set","id","node","prevState","delete","nextMap","modalList","entries","sort","keyA","keyB","localeCompare","map","key","modal"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AAEO,MAAMA,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACvD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B,qBAC9B,IAAIC,GAAJ,EAD8B,CAAhC;AAIA,QAAMC,YAAY,GAAG,oBAA0C,MAAM;AACnE,WAAO;AACL;AACAC,MAAAA,GAAG,EAAE,CAACC,EAAD,EAAKC,IAAL,KAAc;AACjB;AACAL,QAAAA,WAAW,CAAEM,SAAD,IAAe,IAAIL,GAAJ,CAAQK,SAAR,EAAmBH,GAAnB,CAAuBC,EAAvB,EAA2BC,IAA3B,CAAhB,CAAX;AACD,OALI;AAML;AACAE,MAAAA,MAAM,EAAGH,EAAD,IAAQ;AACd;AACAJ,QAAAA,WAAW,CAAEM,SAAD,IAAe;AACzB,gBAAME,OAAO,GAAG,IAAIP,GAAJ,CAAQK,SAAR,CAAhB;AACAE,UAAAA,OAAO,CAACD,MAAR,CAAeH,EAAf;AACA,iBAAOI,OAAP;AACD,SAJU,CAAX;AAKD;AAdI,KAAP;AAgBD,GAjBoB,EAiBlB,EAjBkB,CAArB;AAmBA,QAAMC,SAAS,GAAG,oBAAQ,MAAM;AAC9B,WAAO,CAAC,GAAGV,QAAQ,CAACW,OAAT,EAAJ,EACJC,IADI,CACC,CAAC,CAACC,IAAD,CAAD,EAAS,CAACC,IAAD,CAAT,KAAoBD,IAAI,CAACE,aAAL,CAAmBD,IAAnB,CADrB,EAEJE,GAFI,CAEA,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,kBAAkB,6BAAC,iBAAD;AAAM,MAAA,GAAG,EAAED;AAAX,OAAiBC,KAAjB,CAFlB,CAAP;AAGD,GAJiB,EAIf,CAAClB,QAAD,CAJe,CAAlB;AAMA,sBACE,6BAAC,0BAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEG;AAA9B,KACGJ,QADH,EAEGW,SAFH,CADF;AAMD,CApCM","sourcesContent":["import React, { ContextType, useMemo, useState } from 'react';\nimport { ModalContext } from './modal-context';\nimport { View } from 'react-native';\n\nexport const ModalProvider: React.FC = ({ children }) => {\n  const [modalMap, setModalMap] = useState<Map<string, React.ReactNode>>(\n    new Map()\n  );\n\n  const modalContext = useMemo<ContextType<typeof ModalContext>>(() => {\n    return {\n      // 모달 추가/업데이트\n      set: (id, node) => {\n        // ID에 입력받은 노드 매핑\n        setModalMap((prevState) => new Map(prevState).set(id, node));\n      },\n      // 모달 제거\n      delete: (id) => {\n        // 주어진 ID에 해당하는 모달 제거\n        setModalMap((prevState) => {\n          const nextMap = new Map(prevState);\n          nextMap.delete(id);\n          return nextMap;\n        });\n      },\n    };\n  }, []);\n\n  const modalList = useMemo(() => {\n    return [...modalMap.entries()]\n      .sort(([keyA], [keyB]) => keyA.localeCompare(keyB))\n      .map(([key, modal]) => <View key={key}>{modal}</View>);\n  }, [modalMap]);\n\n  return (\n    <ModalContext.Provider value={modalContext}>\n      {children}\n      {modalList}\n    </ModalContext.Provider>\n  );\n};\n"]}