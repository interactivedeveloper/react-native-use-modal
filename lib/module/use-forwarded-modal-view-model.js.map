{"version":3,"sources":["use-forwarded-modal-view-model.tsx"],"names":["useCallback","useEffect","useImperativeHandle","useMemo","useState","BehaviorSubject","EMPTY","firstValueFrom","Subject","filter","first","switchMap","tap","ModalResultType","Event","useForwardedModalViewModel","ref","handleHide","desiredVisibility","setDesiredVisibility","result$","visibility$","param","setParam","hidingFinishedEvent$","hideCommand$","subscription","pipe","next","subscribe","unsubscribe","hide","show","_param","confirm","data","value","type","CONFIRM","cancel","CANCEL","setHidingFinished"],"mappings":"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","sourcesContent":["import {\n  MutableRefObject,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useState,\n} from 'react';\nimport { BehaviorSubject, EMPTY, firstValueFrom, Subject } from 'rxjs';\nimport { filter, first, switchMap, tap } from 'rxjs/operators';\nimport type { ModalInstance } from './modal-instance';\nimport type { ModalResult } from './modal-result';\nimport type { ModalConfirmFunction } from './modal-confirm-function';\nimport { ModalResultType } from './modal-result-type';\nimport { Event } from './event';\n\ntype ModalVisibility = 'HIDDEN' | 'SHOWN';\n\nexport const useForwardedModalViewModel = <\n  Data extends unknown = void, // 모달 결과로 받을 값의 타입\n  Param extends unknown = void\n>(\n  ref:\n    | ((instance: ModalInstance<Data, Param> | null) => void)\n    | MutableRefObject<ModalInstance<Data, Param> | null>\n    | null,\n  {\n    handleHide,\n  }: {\n    handleHide: boolean;\n  }\n) => {\n  // desired 표시 상태 (이 값이 true 라고 해서 모달이 표시된 상태는 아닙니다. false 도 마찬가지)\n  const [desiredVisibility, setDesiredVisibility] = useState(false);\n\n  // AlertResult Subject\n  const [result$] = useState(() => new Subject<ModalResult<Data>>());\n  // 보여짐/숨겨짐 상태\n  const [visibility$] = useState(\n    () => new BehaviorSubject<ModalVisibility>('HIDDEN')\n  );\n  const [param, setParam] = useState<Param | null>(null);\n  const [hidingFinishedEvent$] = useState(() => new Subject<Event>());\n  const [hideCommand$] = useState(() => new Subject<Event>());\n\n  useEffect(() => {\n    const subscription = hideCommand$\n      .pipe(\n        switchMap(() => {\n          setDesiredVisibility(false);\n          if (handleHide) {\n            return hidingFinishedEvent$.pipe(\n              first(),\n              tap(() => {\n                visibility$.next('HIDDEN');\n              })\n            );\n          } else {\n            visibility$.next('HIDDEN');\n            return EMPTY;\n          }\n        })\n      )\n      .subscribe();\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [handleHide, hideCommand$, hidingFinishedEvent$, visibility$]);\n\n  const hide = useCallback(() => {\n    hideCommand$.next(new Event());\n  }, [hideCommand$]);\n\n  const show = useCallback(() => {\n    setDesiredVisibility(true);\n    visibility$.next('SHOWN');\n  }, [visibility$]);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      // @ts-ignore\n      show: (_param: Param) => {\n        setParam(_param);\n        show();\n        // 모달 결과 Subject 에서\n        return firstValueFrom(result$);\n      },\n    }),\n    [result$, show]\n  );\n\n  // 모달 종료 (승인)\n  const confirm = useCallback<ModalConfirmFunction<Data>>(\n    // @ts-ignore\n    (data) => {\n      hide();\n      // 숨김 상태로 변경되면 result 발행\n      visibility$\n        .pipe(\n          filter((value) => value === 'HIDDEN'),\n          first()\n        )\n        .subscribe(() => {\n          result$.next({\n            type: ModalResultType.CONFIRM,\n            // @ts-ignore\n            data,\n          });\n        });\n    },\n    [hide, result$, visibility$]\n  );\n\n  // 모달 종료 (취소)\n  const cancel = useCallback(() => {\n    hide();\n    // 숨김 상태로 변경되면 result 발행\n    visibility$\n      .pipe(\n        filter((value) => value === 'HIDDEN'),\n        first()\n      )\n      .subscribe(() => {\n        result$.next({\n          type: ModalResultType.CANCEL,\n        });\n      });\n  }, [hide, result$, visibility$]);\n\n  const setHidingFinished = useCallback(() => {\n    hidingFinishedEvent$.next(new Event());\n  }, [hidingFinishedEvent$]);\n\n  return useMemo(\n    () => ({\n      confirm,\n      cancel,\n      param,\n      setHidingFinished,\n      desiredVisibility,\n    }),\n    [confirm, cancel, param, setHidingFinished, desiredVisibility]\n  );\n};\n"]}